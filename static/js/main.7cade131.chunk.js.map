{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","games","gameName","numberOfPlayers","timeToPlay","numberOfCopies","addGame","push","console","log","setState","deleteGame","indexToDelete","filter","game","index","json","localStorage","getItem","JSON","parse","this","prevProps","prevState","length","stringify","setItem","Container","className","Jumbotron","type","required","name","onChange","event","target","value","onClick","style","width","map","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7cade131.chunk.js","sourcesContent":["import React, { Component} from 'react';\nimport './App.css';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\nclass App extends Component {\n  \n  state = {\n      games: [{\n      gameName: \"\",\n      numberOfPlayers: \"\",\n      timeToPlay:\"\",\n      numberOfCopies:\"\"\n    }]\n    };\n\n  \n  \n  addGame =()=> {\n    let games = [...this.state.games];\n    games.push({\n      gameName: this.state.gameName,\n      numberOfPlayers: this.state.numberOfPlayers,\n      timeToPlay: this.state.timeToPlay,\n      numberOfCopies: this.state.numberOfCopies\n    });\n    console.log(games); \n    this.setState({\n      games:games\n      }\n    )\n  }\n  deleteGame = indexToDelete => {\n    let games = [...this.state.games].filter(\n      (game, index) => index !== indexToDelete\n    );\n    this.setState({ games });\n  };\n  componentDidMount() {\n    const json = localStorage.getItem(\"games\");\n    const games = JSON.parse(json);\n    this.setState({\n      games:games\n      })\n  }\n\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.games.length !== this.state.games.length) {\n      const json = JSON.stringify(this.state.games);\n      localStorage.setItem(\"games\", json);\n    }\n  }\n\n\n  render(){\n  return (\n        <>\n        <Container className=\"p-3\">\n          <Jumbotron>\n          <h1 className=\"header\">Board Game Inventory</h1>\n          \n              <div className=\"form-group row\">\n                <label className=\"col-sm-3 col-form-label\">Board Game Name:</label>\n                <div className=\"col-sm-6\">\n                <input type=\"text\" required className=\"form-control\"  name=\"gameName\" onChange={event => this.setState({ gameName: event.target.value })}></input>\n                </div>\n              </div>\n              <div className=\"form-group row\">\n                <label className=\"col-sm-3 col-form-label\">Number of players:</label>\n                <div className=\"col-sm-6\">\n                <input type=\"number\" required className=\"form-control w-25\"  name=\"numberOfPlayers\" onChange={event => this.setState({ numberOfPlayers: event.target.value })}></input>\n                </div>\n              </div>\n              <div className=\"form-group row\">\n                <label className=\"col-sm-3 col-form-label\">Time to play (in minutes):</label>\n                <div className=\"col-sm-6\">\n                <input type=\"number\" required className=\"form-control w-25\"   name=\"timeToPlay\" onChange={event => this.setState({ timeToPlay: event.target.value })}></input>\n                </div>\n              </div>\n              <div className=\"form-group row\">\n                <label className=\"col-sm-3 col-form-label\">Number of copies owned:</label>\n                <div className=\"col-sm-6\">\n                <input type=\"number\" required className=\"form-control w-25\" name=\"numberOfCopies\"  onChange={event => this.setState({ numberOfCopies: event.target.value })}></input>\n                </div>\n              </div>\n              <div className=\"form-group row\">\n                <div className=\"col-sm-10\">\n                  <button type=\"submit\" className=\"btn btn-primary\" onClick={this.addGame}>Submit</button>\n                </div>\n              </div>\n              <table style={{ width: \"100%\" }} className=\"table table-hover\">\n                <thead>\n                  <tr>\n                    <td>Name</td>\n                    <td>No. of Players</td>\n                    <td>Time to spent (in minutes)</td>\n                    <td>No. of copies owned</td>\n                    <td>Action</td>\n                    </tr>\n                  </thead>\n              <tbody>\n              {\n                this.state.games.map((game, index) => (\n                <tr key={index}>\n                  <td>{game.gameName}</td>\n                  <td>{game.numberOfPlayers}</td>\n                  <td>{game.timeToPlay}</td>\n                  <td>{game.numberOfCopies}</td>\n                  <td><button type=\"submit\" className=\"btn btn-primary\" onClick={() => this.deleteGame(index)}>Delete</button></td>\n                </tr>\n                ))\n              }\n              </tbody>\n                \n                </table>\n              \n  \n          </Jumbotron>\n        </Container>\n        </>\n  );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}